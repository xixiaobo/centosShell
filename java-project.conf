# 项目运行的java环境，默认使用本机 java环境,不符合版本则会在脚本的上级目录寻找java名称的java目录，以上均没有并且开启agent管理的情况下会下载java使用
javaPath=java
# 指定java的使用版本进行判断。默认是1.8
# javaUseVersion=1.8
# 项目jar包所在目录，默认为脚本所在目录
# jarPath=
# 项目jar包名称
jarName=secret-collection-4.0.0.jar
# 项目启动的jvm配置, 默认为 -server -Xms128m -Xmx256m
javaOptions=-server -Xms128m -Xmx256m
# 检查项目是否启动获取pid前等待秒数，默认是3s
# startsecs=3
# 查询项目进程的方法类型，默认值为 name，可选 port
# processCheckType=name
# 查询项目进程的名称，默认是项目jar包名称
# processName=
# 查询项目进程的端口，如果 processCheckType 配置为 port 则必须指定端口
# processPort=
# 项目名称默认为脚本名称
# projectName=
# 项目运行输出日志文件所在目录，默认为脚本所在目录
# runLogFilePath=
# 项目运行输出日志文件名称，默认为项目名
# runLogFileName=
# 指定运行日志文件记录大小限制，单位为Mb，默认值为：10，如果超过限制大小就会清空日志文件，开启备份会在备份后清空，设置为0，则不限制大小
# runLogFileMaxSize=10
# 备份保留运行日志个数，默认为0，当大于0的时候开启备份
# runLogBacks=0
# 开启定时任务后，监测项目运行保活的cron，默认为 */5 * * * *
# projectKeepAliveCron=*/5 * * * *
# 开启定时任务后，定时检查清理备份日志的cron，默认为 0 1 * * *
# clearLogFileCron=0 1 * * *
# 开启 agent 控制,默认是 false
# enableAgentManage=false
# agent 控制中心地址
# agentControlCenter=127.0.0.1:8766
# agent 控制中心 获取agent版本的API
# checkVersionApi=api/agent-manage/agent-last-version
# agent 控制中心 获取agent控制脚本的API
# downloadAgentScriptApi=api/agent-manage/agent-script-download
# agent 控制中心 获取agent控制脚本配置文件的API
# downloadAgentScriptConfigApi=api/agent-manage/agent-script-config-download
# agent 控制中心 获取agent jar包的API
# downloadAgentApi=api/agent-manage/agent-download
# agent 控制中心 获取agent默认配置文件的API
#downloadAgentDefaultConfigApi=api/agent-manage/agent-default-yml-download
# agent 控制中心 获取agent默认配置文件的API
# downloadJavaApi=api/agent-manage/java-download



